{"ast":null,"code":"var _jsxFileName = \"/Users/adam/Downloads/typescript-in-react/src/store/todos-context.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Todo from \"../models/todo\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const todosContext = /*#__PURE__*/React.createContext({\n  items: [],\n  addTodo: () => {},\n  removeTodo: id => {}\n});\n\nconst todosContextProvider = props => {\n  _s();\n\n  const [todos, setTodos] = useState([]); // initial empty array won't conflict with the type definition.\n\n  const addTodoHandler = value => {\n    const todoText = new Todo(value);\n    setTodos(current => [...current, todoText]);\n  };\n\n  const removeTodoHandler = id => {\n    setTodos(current => current.filter(todo => todo.id !== id));\n  };\n\n  const contextValue = {\n    items: todos,\n    addTodo: addTodoHandler,\n    removeTodo: removeTodoHandler\n  };\n  return /*#__PURE__*/_jsxDEV(todosContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s(todosContextProvider, \"ZATHeV9x55jFrDOww2hwcxQ3V1U=\");\n\nexport default todosContextProvider;","map":{"version":3,"sources":["/Users/adam/Downloads/typescript-in-react/src/store/todos-context.tsx"],"names":["React","useState","Todo","todosContext","createContext","items","addTodo","removeTodo","id","todosContextProvider","props","todos","setTodos","addTodoHandler","value","todoText","current","removeTodoHandler","filter","todo","contextValue","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAOC,IAAP,MAAiB,gBAAjB;;AAQA,OAAO,MAAMC,YAAY,gBAAGH,KAAK,CAACI,aAAN,CAAqC;AAC/DC,EAAAA,KAAK,EAAE,EADwD;AAE/DC,EAAAA,OAAO,EAAE,MAAM,CAAE,CAF8C;AAG/DC,EAAAA,UAAU,EAAGC,EAAD,IAAgB,CAAE;AAHiC,CAArC,CAArB;;AAMP,MAAMC,oBAA8B,GAAIC,KAAD,IAAW;AAAA;;AAChD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAS,EAAT,CAAlC,CADgD,CACA;;AAEhD,QAAMY,cAAc,GAAIC,KAAD,IAAmB;AACxC,UAAMC,QAAQ,GAAG,IAAIb,IAAJ,CAASY,KAAT,CAAjB;AACAF,IAAAA,QAAQ,CAAEI,OAAD,IAAa,CAAC,GAAGA,OAAJ,EAAaD,QAAb,CAAd,CAAR;AACD,GAHD;;AAKA,QAAME,iBAAiB,GAAIT,EAAD,IAAgB;AACxCI,IAAAA,QAAQ,CAAEI,OAAD,IAAaA,OAAO,CAACE,MAAR,CAAgBC,IAAD,IAAUA,IAAI,CAACX,EAAL,KAAYA,EAArC,CAAd,CAAR;AACD,GAFD;;AAIA,QAAMY,YAA6B,GAAG;AACpCf,IAAAA,KAAK,EAAEM,KAD6B;AAEpCL,IAAAA,OAAO,EAAEO,cAF2B;AAGpCN,IAAAA,UAAU,EAAEU;AAHwB,GAAtC;AAMA,sBACE,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEG,YAA9B;AAAA,cACGV,KAAK,CAACW;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAvBD;;GAAMZ,oB;;AAyBN,eAAeA,oBAAf","sourcesContent":["import React, { useState } from \"react\";\n\nimport Todo from \"../models/todo\";\n\ntype todosContextObj = {\n  items: Todo[];\n  addTodo: (text: string) => void;\n  removeTodo: (id: string) => void;\n};\n\nexport const todosContext = React.createContext<todosContextObj>({\n  items: [],\n  addTodo: () => {},\n  removeTodo: (id: string) => {},\n});\n\nconst todosContextProvider: React.FC = (props) => {\n  const [todos, setTodos] = useState<Todo[]>([]); // initial empty array won't conflict with the type definition.\n\n  const addTodoHandler = (value: string) => {\n    const todoText = new Todo(value);\n    setTodos((current) => [...current, todoText]);\n  };\n\n  const removeTodoHandler = (id: string) => {\n    setTodos((current) => current.filter((todo) => todo.id !== id));\n  };\n\n  const contextValue: todosContextObj = {\n    items: todos,\n    addTodo: addTodoHandler,\n    removeTodo: removeTodoHandler,\n  };\n\n  return (\n    <todosContext.Provider value={contextValue}>\n      {props.children}\n    </todosContext.Provider>\n  );\n};\n\nexport default todosContextProvider;\n"]},"metadata":{},"sourceType":"module"}